version: 2.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            # SUCCESS = 1
            SUCCESS=$(curl --insecure https://kvdb.io/GQdpm2yaXR4jyWfYmXfibA/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ./backend
              npm install
              npm run migrations:revert
              #Add revert code here. You can find this in the Getting Started section.
            fi
  
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: | 
            # apk add --upgrade bash
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y 
            
  install_nodejs:
    description: install node 
    steps:
      - run:
          name: install node
          command: | 
            # apk add --upgrade bash
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            # sudo apt install -y nodejs
            apt-get install -y nodejs
            
  install_awscli:
    description: install awscli
    steps:
      - run:
          name:
          command: | 
            #apk add --upgrade bash
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install 
          
            
       
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: test-frontend
          command: |
             cd frontend
             npm install
             npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build       
             
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: test-backend
          command: |
             cd backend
             npm install
             npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build  
          
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: scan-frontend
          command: |
             cd frontend
             npm install
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend  

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: scan-backend
          command: |
             cd backend
             npm install
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-backend

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
            #   --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
            #   --query 'Reservations[*].Instances[*].PublicIpAddress' \
            #   --output text)
            # echo "[all]" >> .circleci/ansible/inventory.txt
            # echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.8-alpine
      
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c4:b4:b3:8e:b2:49:8d:15:dc:77:1a:db:63:54:f6:59"] 
      - attach_workspace:
          at: ~/    
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            # Your code here
            cat .circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          
  run-migrations:
    docker:
       - image: circleci/node:13.8.0
      #- image: sleavely/node-awscli
    steps:
      #- checkout # Checkout code from git
      - checkout
      # - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # npm audit fix --force
            # npm audit fix --force 
            # npm audit fix --force
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to KVDB
          command: |
            # Your code here
            cd backend
            if grep -q "has been done successfully" ./migrations_dump.txt 
            then 
              #curl -d '1' https://kvdb.io/GQdpm2yaXR4jyWfYmXfibA/test
              curl https://kvdb.io/GQdpm2yaXR4jyWfYmXfibA/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi 
            
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert_migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      
    # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
      # - image: cimg/base:stable 
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: install dependencies
          command: | 
            # apk add --upgrade bash
            # curl -fsSL https://deb.nodesource.com/setup_13.x | bash - && yum -y install nodejs tar gzip
            curl -fsSL https://rpm.nodesource.com/setup_13.x | bash - && yum -y install nodejs tar gzip
            # sudo apt install -y nodejs
      # - install_nodejs
      # - install_awscli
      
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            # echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          
      - revert_migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      # - image: python:3.8-alpine
      - image: circleci/node:13.8.0
      # - image: cimg/base:stable
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - restore_cache:
          keys: [backend-build]
      # - install_ansible
      # - install_awscli
      # - install_nodejs
      - add_ssh_keys:
          fingerprints: [ "c4:b4:b3:8e:b2:49:8d:15:dc:77:1a:db:63:54:f6:59" ] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            # apk add curl
            # apk add --upgrade bash
            # apk add --update ansible
            # # apk add --update nodejs
            # apk add openssh-client
            # pip3 install awscli
            sudo apt-get update -y
            sudo apt-get install -y python3
            sudo apt-get install -y awscli tar ansible
            # apk add curl
            # apk add --upgrade bash
            # apk add --update ansible
            # apk add openssh-client
            # pip3 install awscli
      # - install_nodejs
      
      - run:
          name: Deploy backend
          command: |
            # cd backend
            # npm install
            # npm i
            # npm run build
            # cd ..
            # tar -C backend -czvf artifact.tar.gz .
            # cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            # cd .circleci/ansible
            # echo "Contents  of the inventory.txt file is:"
            # cat inventory.txt
            # ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt deploy-backend.yml
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            # /CICD/cdond-c3-projectstarter/.circleci/ansible
            echo "Contents  of the inventory.txt file is:"
            cat .circleci/ansible/inventory.txt
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml

      # Here's where you will add some code to rollback on failure 

      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          
      - revert_migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    

  smoke-test:
    docker:
      # Lightweight Docker image 
      #- image: cimg/base:stable
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            #curl -fsSL https://deb.nodesource.com/setup_13.x | bash - && yum -y install nodejs tar gzip
            curl -fsSL https://rpm.nodesource.com/setup_13.x | bash - && yum -y install nodejs tar gzip
      - run:
          name: backend smoke test.
          command: |
            # your code here
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            if curl -s $API_URL/api/status | grep "ok"
            then 
              exit 0
            else
              exit 1 
            fi 
            
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
              if curl -s ${URL} | grep "Welcome"
              then
                return 0
              else
                return 1
              fi
      # - run:
      #     name: Frontend smoke test.
      #     command: |
      #       # your code here

      # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]